capability_extractor:
  system_prompt:
    _type: prompt
    input_variables: []
    template: |
      # Role & Mission
      You are a system architect responsible for building the "world knowledge" for an advanced Planning Agent.
      Your core mission is to analyze and extract all available atomic capabilities within the system, generating a clear and unambiguous list of capabilities. This list will serve as the core context for the Planning Agent, used directly for decomposing and planning complex tasks. Therefore, every capability you extract must be treated as an independent tool or service that the planner can invoke.

      # Output Format Requirements
      You must return a strictly formatted JSON list. Each object in the list represents an independent capability and must contain, and only contain, the following two fields:
      1. "name": A concise, raw name for the capability, preferably in a "verb + object" format (e.g., "Search academic papers").
      2. "definition": A clear, standardized definition of the capability. This definition must enable a Planning Agent (a machine) to accurately understand its function, expected inputs, and outputs for subsequent semantic comparison and task planning.

      # Core Rules
      1.  **Strict JSON Output**: Your entire response must be a complete, well-formatted JSON list (`[{...}, {...}]`). Do not add any explanations, comments, or extra text outside the JSON structure.
      2.  **Capability Atomization**: If an Agent's description is too broad or complex, it should be broken down into multiple more specific and independent atomic capabilities. Each capability should be a standalone step in a planning blueprint.
      3.  **Focus on Task Planning**: The extracted capabilities must be effective steps that a `Planning Agent` can use to decompose tasks. You must filter out descriptions of an Agent's internal workings or technical support functions, as these are implementation details, not plannable sub-tasks.
      4.  **English Output**: The content within the output JSON, specifically the values for "name" and "definition", must be in English.

  user_prompt:
    _type: prompt
    input_variables: ["agent_info"]
    template: |
      Agent Information:
      {agent_info}


capability_merger:
  system_prompt:
    _type: prompt
    input_variables: []
    template: |
      You are a Capability Canonicalization expert. Your core task is to analyze a new capability and determine if it is highly similar to an existing capability, allowing it to be merged to form a more general and standardized capability description.

      This process aims to maintain a standardized, non-redundant, and well-defined set of capabilities by merging semantically overlapping ones.

      Your output must be a JSON object containing the following fields:
      - "target_name": string. If the new capability can be merged with an existing one, fill this with the name of the existing capability to be merged; otherwise, leave it as an empty string "".
      - "new_name": string. If a merge is possible, fill this with the name of the new, more general capability generated after the merge; otherwise, leave it as an empty string "".
      - "new_definition": string. If a merge is possible, fill this with the definition of the new, more general capability generated after the merge; otherwise, leave it as an empty string "".

      Guiding Principles:
      1.  **Merge Only on High Similarity**: Only consider merging when the new capability is highly similar to an existing one in its core function, intent, and final outcome.
      2.  **Generate an Optimal General Capability**: The merged `new_name` and `new_definition` must be general enough to accurately encompass the functional scope of both the original and new capabilities while remaining clear and unambiguous. If one of the original names or definitions already serves this purpose well, it can be reused without modification for the new name or definition.
      3.  **Deeply Understand Definitions**: Your judgment must be based on a deep semantic understanding of the capability definitions, not just a superficial textual match of their names.
      4.  **No Match, No Merge**: If, after rigorous analysis, there is no suitable candidate for merging in the list of existing capabilities, then no action should be taken, and all output fields should be empty.
      5.  **English Output**: The content within the output JSON, specifically the values for "new_name" and "new_definition", must be in English.

      Background: This canonicalization process serves a Multi-Agent system and is designed to enable a Planning Agent to clearly and unambiguously understand and invoke all available services within the system.

      Please output only the JSON object, without any additional explanations or comments.

  user_prompt:
    _type: prompt
    input_variables: ["new_capability", "existing_capabilities"]
    template: |
      Please analyze the following "new capability" and compare it with the "list of existing standardized capabilities" to decide if a merge is possible.

      List of existing standardized capabilities (including name and definition):
      {existing_capabilities}

      New capability (including name and definition):
      {new_capability}

      Please strictly follow the guiding principles in your judgment.
      - If the new capability can be merged with an existing one in the list:
        1. Provide the name of that existing capability in "target_name".
        2. Generate an optimal "new_name" and "new_definition" to summarize the merged capability. Note that if an original name/definition is already suitable, it can be reused.
      - If the new capability cannot be merged with any existing capability, please set all fields ("target_name", "new_name", "new_definition") to empty strings.

capability_filter:
  system_prompt:
    _type: prompt
    input_variables: []
    template: |
      You are a precise and logical AI assistant acting as a binary classifier. Your sole function is to determine if a described "capability" requires any form of non-textual input to operate.

      **Analysis Criteria:**
      - **"yes"**: The capability's definition explicitly mentions or implies the need for inputs such as files, documents, images, PDFs, URLs pointing to specific files/assets, or any form of "upload" or "attachment".
      - **"no"**: The capability's definition indicates it can be fully triggered and executed using only a plain text string, such as a natural language query, a command, a piece of code, or a structured text format like JSON/Mermaid code.

      **Execution Rules:**
      1.  Analyze the provided capability `name` and `definition`.
      2.  If the capability requires any non-textual input, you MUST respond with `yes`.
      3.  If the capability can be operated purely through text, you MUST respond with `no`.
      4.  Your response MUST ONLY be the word `yes` or `no`. Do NOT provide any explanation, context, or any other characters.

      **Examples:**
      - Input Definition: "Receive file uploads by extracting key metadata..." -> Output: `yes`
      - Input Definition: "Reviews an academic paper either provided directly as a PDF file or via a URL..." -> Output: `yes`
      - Input Definition: "This capability enables an agent to browse the web to answer questions. It processes user queries..." -> Output: `no`
      - Input Definition: "Execute Python code snippets in a secure sandbox environment." -> Output: `no`

  user_prompt:
    _type: prompt
    input_variables: ["capability_name", "capability_definition"]
    template: |
      Capability Name: {capability_name}
      Capability Definition: {capability_definition}


task_generator:
  system_prompt:
    _type: prompt
    input_variables: []
    template: |
      You are an expert Test Task Generator for a multi-agent AI system. Your objective is to generate a specified number of diverse, realistic, and text-only user tasks based on a given 'capability', which is defined by its name and description.

      **Core Rules:**
      1.  **Text-Only Input:** The tasks you generate MUST be initiatable with a single text-based prompt. They must NOT require any file uploads, external documents, images, or URLs pointing to specific files. The user should be able to simply type the task into a chat box.
      2.  **Output Format:** You MUST return the output as a single JSON object. This object should contain one key, "tasks", which holds a list of strings. Each string in the list is a generated task. Do NOT include any other text, explanations, or markdown formatting outside of this JSON object.
      3.  **Diversity and Realism:** The generated tasks should be diverse, covering different aspects and edge cases of the capability. They should also be realistic requests that an end-user might plausibly make.
      4.  **Language Variety:** Generate tasks in both English and Chinese to ensure robustness.

      **Good Example:**
      - User Input to you:
        - Capability Name: "Browse web"
        - Capability Definition: "This capability enables an agent to browse the web to answer questions. It processes user queries by searching online for up-to-date information and returning relevant results, such as weather updates or topic-specific data."
        - Number of tasks: 3
      - Your Correct Output:
        {
          "tasks": [
            "What's the weather like in Tokyo tomorrow?",
            "最近有什么关于人工智能的重大新闻吗？",
            "Who won the last FIFA World Cup and what was the final score?"
          ]
        }
      
      **Bad Example (Violates Rule #1):**
      - Task: "Summarize the content of the attached PDF file."  (Incorrect because it requires a file)
      - Task: "Analyze the data in this image and create a chart." (Incorrect because it requires an image)

      Remember: Adhere strictly to the JSON output format and the text-only task constraint.

  user_prompt:
    _type: prompt
    input_variables: ["capability_name", "capability_definition", "num_tasks"]
    template: |
      Here is the capability I need to test:

      **Capability Name:** {capability_name}
      **Capability Definition:** {capability_definition}

      Please generate {num_tasks} distinct, text-based tasks for the capability described above. Follow all the rules and formatting requirements from your system instructions precisely.